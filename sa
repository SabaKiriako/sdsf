from PyQt5 import QtGui
from PyQt5.QtCore import Qt
from PyQt5.QtGui import QBrush, QImage, QPainter, QPixmap, QWindow, QPen
from PyQt5.QtWidgets import QLabel, QVBoxLayout, QWidget, QPushButton, QGridLayout, QFrame, QRadioButton, QButtonGroup, \
    QApplication
import cv2
import queue
import sys
from flask import Flask, request
import threading

# Initiating the flask app
app = Flask(__name__)


def mask_image(image, imgtype='jpg', size=100):
    """
    Return a ``QPixmap`` from *imgdata* masked with a smooth circle.
    The returned image will have a size of *size* Ã— *size* pixels.
    """
    out_img = QImage(size, size, QImage.Format_ARGB32)
    out_img.fill(Qt.transparent)

    brush = QBrush(image)  # Create texture brush
    painter = QPainter(out_img)  # Paint the output image
    painter.setBrush(brush)  # Use the image texture brush
    painter.setPen(Qt.NoPen)  # Don't draw an outline
    painter.setRenderHint(QPainter.Antialiasing, True)  # Use AA
    painter.drawEllipse(0, 0, size, size)  # Actually draw the circle
    painter.end()  # We are done (segfault if you forget this)

    # Convert the image to a pixmap and rescale it.  Take pixel ratio into
    # account to get a sharp image on retina displays:
    out_img.convertToFormat(QImage.Format_RGB888)
    pr = QWindow().devicePixelRatio()
    pm = QPixmap.fromImage(out_img)
    pm.setDevicePixelRatio(pr)
    size *= pr
    pm = pm.scaled(size, size, Qt.KeepAspectRatio, Qt.SmoothTransformation)

    return pm


def circle_around_image(size=100, color='black'):
    out_img = QImage(size, size, QImage.Format_ARGB32)
    out_img.fill(Qt.transparent)

    painter = QPainter(out_img)  # Paint the output image
    if color == 'red':
        painter.setPen(QPen(Qt.red, 3, Qt.SolidLine))  # draw an outline
    elif color == 'green':
        painter.setPen(QPen(Qt.green, 3, Qt.SolidLine))  # draw an outline
    else:
        painter.setPen(QPen(Qt.black, 3, Qt.SolidLine))  # draw an outline

    painter.setRenderHint(QPainter.Antialiasing, True)  # Use AA
    painter.drawEllipse(0 + 1, 0 + 1, size - 2, size - 2)  # Actually draw the circle border
    painter.end()  # We are done

    # Convert the image to a pixmap and rescale it.  Take pixel ratio into
    # account to get a sharp image on retina displays:
    out_img.convertToFormat(QImage.Format_RGB888)
    pr = QWindow().devicePixelRatio()
    pm = QPixmap.fromImage(out_img)
    pm.setDevicePixelRatio(pr)
    size *= pr
    pm = pm.scaled(size, size, Qt.KeepAspectRatio, Qt.SmoothTransformation)

    return pm



class Person_in_GUI():

    def __init__(self, image_1=None, image_1_circle=None, image_2=None, image_2_circle=None, name=None):
        self.__image_1 = image_1
        self.__image_2 = image_2
        self.image_1_circle = image_1_circle
        self.image_2_circle = image_2_circle
        self.__name = name

    def image1_get(self):
        return self.__image_1

    def image1top_get(self):
        return self.image_1_circle

    def image2_get(self):
        return self.__image_2

    def image2top_get(self):
        return self.image_2_circle

    def name_get(self):
        return self.__name


class MainWindow(QWidget):
    count_Total: int

    def __init__(self, nb_of_persons=3, screen_size='Full_Screen'):
        super().__init__()
        self.setWindowTitle("Authorization App")
        self.setLayout(QVBoxLayout())
        self.screen_size = screen_size

        # Setting Background Image
        self.background = QtGui.QPixmap("IDemia.PNG")
        palette = QtGui.QPalette()
        palette.setBrush(QtGui.QPalette.Background, QtGui.QBrush(self.background))
        self.setPalette(palette)

        # Initializing Elements
        self.count_Total = 0
        self.GUI_elements = []
        self.persons_queue = queue.Queue()
        self.image_init = './person1.jpeg'  # Starting image
        self.nb_of_persons = nb_of_persons

        # Setting the image size
        if self.screen_size == "Full_Screen":
            self.image_size = 180
        else:
            self.image_size = 100

        # Changing screen size depending of nb_persons
        if self.nb_of_persons == 3:
            self.screen_size_set = 300, 700
        elif self.nb_of_persons == 2:
            self.screen_size_set = 300, 500
        elif self.nb_of_persons == 1:
            self.screen_size_set = 300, 250
        else:
            self.nb_of_persons = 3
            self.screen_size_set = 300, 700

        initial_persons = [self.image_init, self.image_init, 'Green', 'Saba ']
        for i in range(self.nb_of_persons):
            self.persons_queue.put(initial_persons)
        self.keypad()

    def change(self):
        data = request.get_json()
        self.persons_queue.get()
        self.persons_queue.put(data)
        self.count_Total += 1

        for frame, item in zip(self.GUI_elements, list(self.persons_queue.queue)[::-1]):
            image = cv2.resize(cv2.imread(item[0]), (self.image_size, self.image_size))
            image = QtGui.QImage(image, image.shape[0], image.shape[1], QtGui.QImage.Format_RGB888)
            image = mask_image(image,size = self.image_size)
            frame.image1_get().setPixmap(QPixmap(image))

            image_top = circle_around_image(size=self.image_size, color=item[2])
            frame.image1top_get().setPixmap(QPixmap(image_top))

            image = cv2.resize(cv2.imread(item[1]), (self.image_size, self.image_size))
            image = QtGui.QImage(image, image.shape[0], image.shape[1], QtGui.QImage.Format_RGB888)
            image = mask_image(image,size = self.image_size)
            frame.image2_get().setPixmap(QPixmap(image))

            image_top = circle_around_image(size=self.image_size, color=item[2])
            frame.image2top_get().setPixmap(QPixmap(image_top))

            frame.name_get().setText(item[3])
        self.num.setText(str(self.count_Total))

        return "Done"

    def thread_start(self):
        app.run(host="0.0.0.0", port=8090)

    def paintEvent(self, event):
        painter = QPainter(self)
        painter.setPen(QPen(Qt.white,  2, Qt.DotLine))
        painter.drawRect(15, 175, 420, 375)
        painter.drawRect(460, 175, 420, 375)
        painter.drawRect(905, 175, 420, 375)

    def keypad(self):
        container = QWidget()
        container.setLayout(QGridLayout())
        image = cv2.resize(cv2.imread(self.image_init), (self.image_size, self.image_size))
        image = QtGui.QImage(image, image.shape[0], image.shape[1], QtGui.QImage.Format_RGB888)
        image = mask_image(image,size = self.image_size)
        image_top = circle_around_image(size=self.image_size, color='black')
        print(image)
        position = 0

        for persons in list(self.persons_queue.queue):
            # Creating first image
            image1 = QLabel()
            image1.setFrameShape(QFrame.Box)
            image1.setFrameShadow(QFrame.Raised)
            image1.setLineWidth(2)
            image1.setStyleSheet('background-color: transparent ')
            image1.setPixmap(QPixmap(image))

            # Creating the circle on top of the first image
            image1top = QLabel()
            image1top.setFrameShape(QFrame.Box)
            image1top.setFrameShadow(QFrame.Raised)
            image1top.setLineWidth(2)
            image1top.setStyleSheet('background-color: transparent ')
            image1top.setPixmap(QPixmap(image_top))

            # Creating second image
            image2 = QLabel()
            image2.setPixmap(QPixmap(image))
            image2.setFrameShape(QFrame.Box)
            image2.setFrameShadow(QFrame.Sunken)
            image2.setLineWidth(2)
            image2.setStyleSheet('background-color: transparent')

            # Creating the circle on top of the second image
            image2top = QLabel()
            image2top.setFrameShape(QFrame.Box)
            image2top.setFrameShadow(QFrame.Raised)
            image2top.setLineWidth(2)
            image2top.setStyleSheet('background-color: transparent ')
            image2top.setPixmap(QPixmap(image_top))

            # Creating the Name label of the person

            name = QPushButton(persons[3])
            name.setStyleSheet(
                "font : 'Roboto' ; font-weight: bold;color : rgb(89,0,155);background-color: rgb(255,255,255);"
                "border-radius: 6px; border-width: 3px;")

            # Adding some spaces
            result_field3 = QLabel()
            result_field3.setText(' ')

            # Adding some spaces
            result_field4 = QLabel()
            result_field4.setText(' ')

            result_field5 = QLabel()
            result_field5.setText('Person 1')
            result_field5.setStyleSheet(
                "font : 'Roboto' ;color : rgb(255,255,255);")

            result_field6 = QLabel()
            result_field6.setText('Person 2')
            result_field6.setStyleSheet(
                "font : 'Roboto' ;color : rgb(255,255,255);")

            result_field7 = QLabel()
            result_field7.setText('Person 3')
            result_field7.setStyleSheet(
                "font : 'Roboto' ;color : rgb(255,255,255);")

            # Positioning the widgets in the window
            if self.screen_size == "Full_Screen":
                container.layout().addWidget(result_field5, 2, 0, 1, 1)
                container.layout().addWidget(result_field6, 2, 6, 1, 1)
                container.layout().addWidget(result_field7, 2, 12, 1, 1)
                container.layout().addWidget(image1, 3, 0 + position, 3, 3)
                container.layout().addWidget(image1top, 3, 0 + position, 3, 3)
                container.layout().addWidget(image2, 3, 3 + position, 3, 3)
                container.layout().addWidget(image2top, 3, 3 + position, 3, 3)
                container.layout().addWidget(name, 2, 2 + position, 2, 2)
                container.layout().addWidget(result_field3, 7, 3 + position, 1, 3)
                container.layout().addWidget(result_field4, 8, 3 + position, 1, 3)
                position += 6
            else :
                container.layout().addWidget(image1, 4 + position, 0, 3, 3)
                container.layout().addWidget(image1top, 4 + position, 0, 3, 3)
                container.layout().addWidget(image2, 4 + position, 4, 3, 3)
                container.layout().addWidget(image2top, 4 + position, 4, 3, 3)
                container.layout().addWidget(name, 2 + position, 2, 2, 3)
                container.layout().addWidget(result_field3, 7 + position, 3, 1, 3)
                container.layout().addWidget(result_field4, 8 + position, 3, 1, 3)
                position += 11
            self.GUI_elements.append(Person_in_GUI(image1, image1top, image2, image2top, name))

        self.num = QLabel()
        self.num.setText(str(""))
        container.layout().addWidget(self.num, 0, 6, 1, 1)

        self.layout().addWidget(container)
        if self.screen_size != "Full_Screen":
            self.setFixedSize(*self.screen_size_set)
        else:
            self.showMaximized()

        self.show()

        new = threading.Thread(target=self.thread_start)
        new.start()


if __name__ == "__main__":
    app2 = QApplication(sys.argv)
    mw = MainWindow()
    app.add_url_rule('/Change', 'Change', view_func=mw.change, methods=['POST'])
    print(app.url_map)
    app2.exec()
